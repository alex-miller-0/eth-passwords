.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_LOOKUP_hash_dir 3"
.TH X509_LOOKUP_hash_dir 3 "2015-12-05" "1.1.0-dev" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_LOOKUP_hash_dir, X509_LOOKUP_file,
X509_load_cert_file,
X509_load_crl_file,
X509_load_cert_crl_file \- Default OpenSSL certificate
lookup methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <openssl/x509_vfy.h>
\&
\&  X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
\&  X509_LOOKUP_METHOD *X509_LOOKUP_file(void);
\&
\&  int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
\&  int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
\&  int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBX509_LOOKUP_hash_dir\fR and \fBX509_LOOKUP_file\fR are two certificate
lookup methods to use with \fBX509_STORE\fR, provided by OpenSSL library.
.PP
Users of the library typically do not need to create instanses of these
methods manually, they would be created automatically by
\&\fIX509_STORE_load_locations\fR\|(3) or
\&\fISSL_CTX_load_verify_locations\fR\|(3)
functions.
.PP
Internally loading of certificates and CRLs is implemented via functions
\&\fBX509_load_cert_crl_file\fR, \fBX509_load_cert_file\fR and
\&\fBX509_load_crl_file\fR. These functions support parameter \fItype\fR, which
can be one of constants \fB\s-1FILETYPE_PEM\s0\fR, \fB\s-1FILETYPE_ASN1\s0\fR and
\&\fB\s-1FILETYPE_DEFAULT\s0\fR. They load certificates and/or CRLs from specified
file into memory cache of \fBX509_STORE\fR objects which given \fBctx\fR
parameter is associated with.
.PP
Functions \fBX509_load_cert_file\fR and
\&\fBX509_load_crl_file\fR can load both \s-1PEM\s0 and \s-1DER\s0 formats depending of
type value. Because \s-1DER\s0 format cannot contain more than one certificate
or \s-1CRL\s0 object (while \s-1PEM\s0 can contain several concatenated \s-1PEM\s0 objects)
\&\fBX509_load_cert_crl_file\fR with \fB\s-1FILETYPE_ASN1\s0\fR is equivalent to
\&\fBX509_load_cert_file\fR.
.PP
Constant \fB\s-1FILETYPE_DEFAULT\s0\fR with \s-1NULL\s0 filename causes these functions
to load default certificate store file (see
X509_STORE_set_default_paths.
.PP
Functions return number of objects loaded from file or 0 in case of
error.
.PP
Both methods support adding several certificate locations into one
\&\fBX509_STORE\fR.
.PP
This page documents certificate store formats used by these methods and
caching policy.
.SS "\s-1FILE METHOD\s0"
.IX Subsection "FILE METHOD"
\&\fBX509_LOOKUP_file\fR method loads entire set of certificates and CRLs
into memory immediately when file name is passed to it.
.PP
File format is \s-1ASCII\s0 text which contains concatenated \s-1PEM\s0 certificates
and CRLs.
.PP
This method should be used by applications which work with limited set
of CAs.
.SS "\s-1HASHED DIR METHOD\s0"
.IX Subsection "HASHED DIR METHOD"
\&\fBX509_LOOKUP_hash_dir\fR is more sophisticated method, which loads
certificates and CRLs on demand, but caches them in the memory once they
are loaded. However, since OpenSSL 1.0.0beta1 it checks for newer CRLs
upon each lookup, so if newer \s-1CRL\s0 would appear in the directory, it
would be loaded.
.PP
Directory should contain each certificate and \s-1CRL\s0 in the separate file
in the \s-1PEM\s0 format, with file name derived from certificate subject (or \s-1CRL\s0
issuer) hash, as returned by \fIX509_NAME_hash\fR\|(3)
function of with option \fB\-hash\fR of \fIx509\fR\|(1) or
\&\fIcrl\fR\|(1) command.
.PP
This hash value is appended by suffix .\fIN\fR for certificates and
\&\fB.r\fR\fIN\fR for CRLs where \fIN\fR is sequentual
number among certificates with same hash value, so it is possible to
have in the store several certificates with same subject or several CRLs
with same issuer (and, for example, different validity period).
.PP
When checking for new CRLs once one \s-1CRL\s0 for given hash value is loaded, 
hash_dir lookup method checks only for certificates with sequentual
number greater than one of already cached \s-1CRL.\s0
.PP
Note that hash algorithm used for subject hashing is changed in OpenSSL
1.0, so all certificate stores have to be rehashed upon transitopn from
0.9.8 to 1.0.0.
.PP
OpenSSL includes utility \fIc_rehash\fR\|(1) which creates
symlinks with correct hashed names for all files with .pem suffix in the
given directory.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpem\fR\|(3), \fId2i_X509_bio\fR\|(3),
\&\fIX509_STORE_load_locations\fR\|(3),
\&\fIX609_store_add_lookup\fR\|(3),
\&\fISSL_CTX_load_verify_locations\fR\|(3),
